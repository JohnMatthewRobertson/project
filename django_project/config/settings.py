"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os, dj_database_url
#from dotenv import load_dotenv
from environs import Env

# default imports
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# dotenv settings to find basedir django/config
basedir = os.path.abspath(os.path.dirname(__file__))
# dotenv settings to load .env file that contains environment variables into environment
#load_dotenv(os.path.join(basedir, '.env'))
# swap to environs
env = Env()
env.read_env()


# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = ')-@t0sjd%a45!cd+f)4rtun(8w-p5fkxv$m140q3p3ax&3_+i='
# changed hardcored secret_key to environment variable 
#SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', default='')
SECRET_KEY = env('DJANGO_SECRET_KEY', default='')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
# changed hardcoded debug true to environment variable
#DEBUG = os.environ.get('DJANGO_DEBUG', default=False)
#DEBUG = env.bool('DJANGO_DEBUG', default=False)


# changed hardcoded allowed_hosts environment variable
# https://docs.djangoproject.com/en/3.1/ref/settings/#allowed-hosts
#ALLOWED_HOSTS = []
#ALLOWED_HOSTS = [env['DJANGO_HOSTS']]
#ALLOWED_HOSTS = [os.environ.get['DJANGO_HOSTS']]
ALLOWED_HOSTS = ['*',]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'hub.apps.HubConfig',
    'accounts.apps.AccountsConfig',
    'skills.apps.SkillsConfig',
    'feedback.apps.FeedbackConfig',
    'crispy_forms',
    'allauth.account',
    'bootstrap_modal_forms',
    'whitenoise.runserver_nostatic', # new
]

# django crispy forms setting
CRISPY_TEMPLATE_PACK = 'bootstrap4'

# setting to allow custom user instead of default user model
# https://docs.djangoproject.com/en/3.1/topics/auth/customizing/#using-a-custom-user-model-when-starting-a-project
AUTH_USER_MODEL = 'accounts.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # new
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [str(BASE_DIR.joinpath('templates'))],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''

'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'postgres',
        'USER':'postgres',
        'HOST': 'db',
        'PORT': '5432'
    }
}

'''

'''
DATABASES = {
    "default": dj_database_url.config("DATABASE_URL", default="postgres://postgres@db/postgres")
}
'''

'''
DATABASES = {
    "default": env.dj_db_url("DATABASE_URL", default="postgres://postgres@db/postgres")
}
'''

'''
DATABASES = {
    "default": env.dj_db_url("DATABASE_URL")
}
'''

DATABASES = {
    "default": env.dj_db_url("DATABASE_URL")
}



# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# defines location in local development
STATICFILES_DIRS = (str(BASE_DIR.joinpath('static')),)

# defines location for production
STATIC_ROOT = str(BASE_DIR.joinpath('staticfiles'))

# though implicitly set recommended to explicitly set it
STATICFILES_FINDERS = [
    # uses STATICFILES_DIR setting
    "django.contrib.staticfiles.finders.FileSystemFinder",
    # search for any directory named static with an app
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

LOGIN_REDIRECT_URL = 'hub:hub_home'
LOGOUT_REDIRECT_URL = 'hub:hub_home'

# account logout redirect overrides logout redirect url
ACCOUNT_LOGOUT_REDIRECT = 'hub:hub_home'

# django allauth setting
SITE_ID = 1

ACCOUNT_AUTHENTICATION_METHOD = 'email'

ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_UNIQUE_EMAIL = True

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


#EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
#EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
#EMAIL_HOST = os.environ.get("EMAIL_HOST")
#EMAIL_PORT = os.environ.get("EMAIL_PORT")
#EMAIL_USE_TLS = os.environ.get("EMAIL_USE_TLS")

EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
EMAIL_HOST = env("EMAIL_HOST")
#EMAIL_PORT = env("EMAIL_PORT")
#EMAIL_USE_TLS = env("EMAIL_USE_TLS")

EMAIL_PORT = 587
EMAIL_USE_TLS = True


STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # new
